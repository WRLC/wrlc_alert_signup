<?php

use Drupal\node\Entity\Node;

/**
 * @file
 * Primary module hooks for WRLC Alert Signup module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

/**
 * Implements hook_cron().
 */
function wrlc_alert_signup_cron(): void {

  // Get module config
  $config = \Drupal::config('wrlc_alert_signup.settings');

  // Module machine name and node type for use in Watchdog
  $channel = 'wrlc_alert_signup';
  $type = $config->get('node_type');

  // Count of imported items for Watchdog
  $imported = 0;

  // Get all existing message ids from wrlc_alerts nodes
  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'wrlc_alerts')
    ->execute();
  $nodes = \Drupal\node\Entity\Node::loadMultiple($nids);
  $oldMessages = [];
  foreach ($nodes as $node) {
    $oldMessage = $node->get('field_message_id')->getValue();
    if (array_key_exists(0, $oldMessage)) {
      $oldMessages[] = $oldMessage[0]['value'];
    }
  }

  // Load the Google account
  // (id should match id of api client in Drupal admin settings)
  try {
    $google_api_client = \Drupal::entityTypeManager()
      ->getStorage('google_api_client')
      ->load(1);
  } catch (Exception $e) {
    wrlc_alert_signup_log_error($e, $channel);
    exit();
  }

  // Get the service.
  $googleService = \Drupal::service('google_api_client.client');
  // Apply the account to the service
  $googleService->setGoogleApiClient($google_api_client);

  // Fetch service objects.
  try {
    $object = $googleService->getServiceObjects();
  } catch (Exception $e) {
    wrlc_alert_signup_log_error($e, $channel);
    exit();
  }

  // Get Google Group's email address
  $group = $object['directory']->groups->get($config->get('gg_id'));
  $email = $group->email;


  // Create query parameter to filter for alert messages
  $params = [
    'q' => 'list:' . $email,
  ];

  // Get list of message IDs from Gmail
  try {
    $messages = $object['gmail']
      ->users_messages
      ->listUsersMessages('me', $params)['messages'];
  } catch (Exception $e) {
    wrlc_alert_signup_log_error($e, $channel);
    exit();
  }

  // Loop through response to fetch each message by ID
  foreach($messages as $message) {
    try {
      $content = $object['gmail']
        ->users_messages
        ->get('me', $message['id']);
    }
    catch (Exception $e) {
      wrlc_alert_signup_log_error($e, $channel);
      continue;
    }

    // Filter out previously imported message IDs
    if (!in_array($content->getId(), $oldMessages)) {

      // Parse new message for import
      $messageId = $content->getId();  // Get message id
      $payload = $content->getPayload();  // Get message payload
      $parts = $payload->getParts();  // Get payload parts
      $body = '';  // Initialize empty body value
      $subject = '';  // Initialize empty subject value

      // Loop through headers for subject
      foreach ($payload['headers'] as $header) {
        if ($header['name'] == 'Subject') {
          $subject = $header['value'];
        }
      }

      // Loop through parts for HTML body
      foreach ($parts as $part) {
        if ($part['mimeType'] == 'text/html') {
          $body = $part['body']['data'];
          $body = base64_decode(str_replace(array('-', '_'), array('+', '/'), $body));
        }
      }

      // Use message to create a node
      $node = Node::create([
        'type' => $type,
        'uid' => 1,
        'title' => $subject,
        'body' => [
          'value' => $body,
          'format' => 'full_html'
        ],
        'field_message_id' => $messageId,
      ]);

      // Save node
      try {
        $node->save();
      }

      catch (Exception $e) {
        wrlc_alert_signup_log_error($e, $channel);
        continue;
      }

      // Increase imported count for Watchdog
      $imported = $imported + 1;
    }
  }

  // Log results to Watchdog
  if ($imported > 0) {
    \Drupal::logger($channel)->info('@type: imported @count new alerts.',
      [
        '@type' => $type,
        '@count' => $imported,
      ]
    );
  }
  else {
    \Drupal::logger($channel)->info('@type: no new alerts found.',
    [
      '@type' => $type,
    ]);
  }
}

// Reusable function to log Exceptions in watchdog
function wrlc_alert_signup_log_error($e, $channel): void {
  \Drupal::logger($channel)
    ->error('<pre><code>' . $e . '</code></pre>');
}
